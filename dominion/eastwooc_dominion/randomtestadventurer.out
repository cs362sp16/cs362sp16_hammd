Starting random test for adventurer
Failed Assert: Player's coin count has changed.:Expected(5),Actual(3)
Failed Assert: Player's coin count has changed.:Expected(9),Actual(2)
Failed Assert: deckCount is wrong:Expected(14),Actual(19)
Failed Assert: discardCount is wrong:Expected(15),Actual(10)
Failed Assert: Player's coin count has changed.:Expected(8),Actual(0)
Failed Assert: Player's coin count has changed.:Expected(7),Actual(1)
Failed Assert: Player's coin count has changed.:Expected(4),Actual(6)
Failed Assert: Player's coin count has changed.:Expected(7),Actual(4)
Failed Assert: Player's coin count has changed.:Expected(6),Actual(4)
Failed Assert: Player's coin count has changed.:Expected(5),Actual(4)
Failed Assert: Player's coin count has changed.:Expected(7),Actual(4)
Failed Assert: Player's coin count has changed.:Expected(2),Actual(4)
Failed Assert: Player's coin count has changed.:Expected(3),Actual(4)
Failed Assert: deckCount is wrong:Expected(8),Actual(11)
Failed Assert: discardCount is wrong:Expected(13),Actual(10)
Failed Assert: Player's coin count has changed.:Expected(6),Actual(3)
Failed Assert: Player's coin count has changed.:Expected(5),Actual(2)
Failed Assert: Player's coin count has changed.:Expected(5),Actual(4)
Failed Assert: deckCount is wrong:Expected(-1),Actual(7)
Failed Assert: discardCount is wrong:Expected(13),Actual(5)
Failed Assert: Player's coin count has changed.:Expected(1),Actual(2)
Failed Assert: Player's coin count has changed.:Expected(7),Actual(1)
Failed Assert: Player's coin count has changed.:Expected(7),Actual(5)
Failed Assert: deckCount is wrong:Expected(-2),Actual(17)
Failed Assert: discardCount is wrong:Expected(31),Actual(12)
Failed Assert: Player's coin count has changed.:Expected(3),Actual(4)
Failed Assert: Player's coin count has changed.:Expected(0),Actual(3)
File 'dominion.c'
Lines executed:18.64% of 649
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h> //for memset
        -:    8:
      244:    9:int compare(const void* a, const void* b) {
      244:   10:	if (*(int*)a > *(int*)b)
      137:   11:		return 1;
      107:   12:	if (*(int*)a < *(int*)b)
       51:   13:		return -1;
       56:   14:	return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:	int k8, int k9, int k10) {
    #####:   24:	int* k = malloc(10 * sizeof(int));
    #####:   25:	k[0] = k1;
    #####:   26:	k[1] = k2;
    #####:   27:	k[2] = k3;
    #####:   28:	k[3] = k4;
    #####:   29:	k[4] = k5;
    #####:   30:	k[5] = k6;
    #####:   31:	k[6] = k7;
    #####:   32:	k[7] = k8;
    #####:   33:	k[8] = k9;
    #####:   34:	k[9] = k10;
    #####:   35:	return k;
        -:   36:}
        -:   37:
    #####:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:struct gameState *state) {
        -:   40:
        -:   41:	int i;
        -:   42:	int j;
        -:   43:	int it;
        -:   44:	//set up random number generator
    #####:   45:	SelectStream(1);
    #####:   46:	PutSeed((long)randomSeed);
        -:   47:
        -:   48:	//check number of players
    #####:   49:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:	{
    #####:   51:		return -1;
        -:   52:	}
        -:   53:
        -:   54:	//set number of players
    #####:   55:	state->numPlayers = numPlayers;
        -:   56:
        -:   57:	//check selected kingdom cards are different
    #####:   58:	for (i = 0; i < 10; i++)
        -:   59:	{
    #####:   60:		for (j = 0; j < 10; j++)
        -:   61:		{
    #####:   62:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:			{
    #####:   64:				return -1;
        -:   65:			}
        -:   66:		}
        -:   67:	}
        -:   68:
        -:   69:
        -:   70:	//initialize supply
        -:   71:	///////////////////////////////
        -:   72:
        -:   73:	//set number of Curse cards
    #####:   74:	if (numPlayers == 2)
        -:   75:	{
    #####:   76:		state->supplyCount[curse] = 10;
        -:   77:	}
    #####:   78:	else if (numPlayers == 3)
        -:   79:	{
    #####:   80:		state->supplyCount[curse] = 20;
        -:   81:	}
        -:   82:	else
        -:   83:	{
    #####:   84:		state->supplyCount[curse] = 30;
        -:   85:	}
        -:   86:
        -:   87:	//set number of Victory cards
    #####:   88:	if (numPlayers == 2)
        -:   89:	{
    #####:   90:		state->supplyCount[estate] = 8;
    #####:   91:		state->supplyCount[duchy] = 8;
    #####:   92:		state->supplyCount[province] = 8;
        -:   93:	}
        -:   94:	else
        -:   95:	{
    #####:   96:		state->supplyCount[estate] = 12;
    #####:   97:		state->supplyCount[duchy] = 12;
    #####:   98:		state->supplyCount[province] = 12;
        -:   99:	}
        -:  100:
        -:  101:	//set number of Treasure cards
    #####:  102:	state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  103:	state->supplyCount[silver] = 40;
    #####:  104:	state->supplyCount[gold] = 30;
        -:  105:
        -:  106:	//set number of Kingdom cards
    #####:  107:	for (i = adventurer; i <= treasure_map; i++)          //loop all cards
        -:  108:	{
    #####:  109:		for (j = 0; j < 10; j++)                  //loop chosen cards
        -:  110:		{
    #####:  111:			if (kingdomCards[j] == i)
        -:  112:			{
        -:  113:				//check if card is a 'Victory' Kingdom card
    #####:  114:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:				{
    #####:  116:					if (numPlayers == 2) {
    #####:  117:						state->supplyCount[i] = 8;
        -:  118:					}
    #####:  119:					else { state->supplyCount[i] = 12; }
        -:  120:				}
        -:  121:				else
        -:  122:				{
    #####:  123:					state->supplyCount[i] = 10;
        -:  124:				}
    #####:  125:				break;
        -:  126:			}
        -:  127:			else    //card is not in the set choosen for the game
        -:  128:			{
    #####:  129:				state->supplyCount[i] = -1;
        -:  130:			}
        -:  131:		}
        -:  132:
        -:  133:	}
        -:  134:
        -:  135:	////////////////////////
        -:  136:	//supply intilization complete
        -:  137:
        -:  138:	//set hands, decks, discards to -1
    #####:  139:	for (i = 0; i < MAX_PLAYERS; i++) {
    #####:  140:		memset(state->hand[i], -1, MAX_HAND);
    #####:  141:		memset(state->deck[i], -1, MAX_DECK);
    #####:  142:		memset(state->discard[i], -1, MAX_DECK);
    #####:  143:		state->handCount[i] = 0;
    #####:  144:		state->deckCount[i] = 0;
    #####:  145:		state->discardCount[i] = 0;
        -:  146:	}
        -:  147:
        -:  148:	//set player decks
    #####:  149:	for (i = 0; i < numPlayers; i++)
        -:  150:	{
    #####:  151:		state->deckCount[i] = 0;
    #####:  152:		for (j = 0; j < 3; j++)
        -:  153:		{
    #####:  154:			state->deck[i][j] = estate;
    #####:  155:			state->deckCount[i]++;
        -:  156:		}
    #####:  157:		for (j = 3; j < 10; j++)
        -:  158:		{
    #####:  159:			state->deck[i][j] = copper;
    #####:  160:			state->deckCount[i]++;
        -:  161:		}
        -:  162:	}
        -:  163:
        -:  164:	//shuffle player decks
    #####:  165:	for (i = 0; i < numPlayers; i++)
        -:  166:	{
    #####:  167:		if (shuffle(i, state) < 0)
        -:  168:		{
    #####:  169:			return -1;
        -:  170:		}
        -:  171:	}
        -:  172:
        -:  173:	//draw player hands
    #####:  174:	for (i = 0; i < numPlayers; i++)
        -:  175:	{
        -:  176:		//initialize hand size to zero
    #####:  177:		state->handCount[i] = 0;
    #####:  178:		state->discardCount[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//set embargo tokens to 0 for all supply piles
    #####:  182:	for (i = 0; i <= treasure_map; i++)
        -:  183:	{
    #####:  184:		state->embargoTokens[i] = 0;
        -:  185:	}
        -:  186:
        -:  187:	//initialize first player's turn
    #####:  188:	state->outpostPlayed = 0;
    #####:  189:	state->phase = 0;
    #####:  190:	state->numActions = 1;
    #####:  191:	state->numBuys = 1;
    #####:  192:	state->playedCardCount = 0;
    #####:  193:	state->whoseTurn = 0;
    #####:  194:	state->handCount[state->whoseTurn] = 0;
        -:  195:
        -:  196:	//Moved draw cards to here, only drawing at the start of a turn
    #####:  197:	for (i = 0; i < state->numPlayers; i++) {
    #####:  198:		for (it = 0; it < 5; it++) {
    #####:  199:			drawCard(i, state);
        -:  200:		}
        -:  201:	}
        -:  202:
    #####:  203:	updateCoins(state->whoseTurn, state, 0);
        -:  204:
    #####:  205:	return 0;
        -:  206:}
        -:  207:
       24:  208:int shuffle(int player, struct gameState *state) {
        -:  209:
        -:  210:
        -:  211:	int newDeck[MAX_DECK];
       24:  212:	int newDeckPos = 0;
        -:  213:	int card;
        -:  214:	int i;
        -:  215:
       24:  216:	if (state->deckCount[player] < 1)
        9:  217:		return -1;
       15:  218:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      145:  221:	while (state->deckCount[player] > 0) {
      115:  222:		card = floor(Random() * state->deckCount[player]);
      115:  223:		newDeck[newDeckPos] = state->deck[player][card];
      115:  224:		newDeckPos++;
      529:  225:		for (i = card; i < state->deckCount[player] - 1; i++) {
      414:  226:			state->deck[player][i] = state->deck[player][i + 1];
        -:  227:		}
      115:  228:		state->deckCount[player]--;
        -:  229:	}
      130:  230:	for (i = 0; i < newDeckPos; i++) {
      115:  231:		state->deck[player][i] = newDeck[i];
      115:  232:		state->deckCount[player]++;
        -:  233:	}
        -:  234:
       15:  235:	return 0;
        -:  236:}
        -:  237:
       20:  238:int playedCard(int handPos, int* choice1, int* choice2, struct gameState *state) {
        -:  239:	//add the card to the played cards field
       20:  240:	int who = state->whoseTurn;
       20:  241:	state->playedCards[state->playedCardCount] = state->hand[who][handPos];
       20:  242:	state->playedCardCount++;
        -:  243:
        -:  244:	//we're gonna move the last card to the hand position, so we need to adjust choices accordingly
       20:  245:	if (choice1 != NULL && *choice1 == state->handCount[who] - 1)
    #####:  246:		*choice1 = handPos;
       20:  247:	if (choice2 != NULL && *choice2 == state->handCount[who] - 1)
    #####:  248:		*choice2 = handPos;
        -:  249:
       20:  250:	state->hand[who][handPos] = state->hand[who][state->handCount[who] - 1];
       20:  251:	state->hand[who][state->handCount[who] - 1] = -1;
       20:  252:	state->handCount[who]--;
       20:  253:	return 0;
        -:  254:}
        -:  255:
       20:  256:int endPlayed(struct gameState *state, int trashFlag) {
        -:  257:	//add cards from played pile to discard pile
       20:  258:	int who = state->whoseTurn;
        -:  259:	int i;
       40:  260:	for (i = state->playedCardCount - 1; i >= 0; i--) {
       20:  261:		if (trashFlag == 0) {
       20:  262:			state->discard[who][state->discardCount[who]] = state->playedCards[i];
       20:  263:			state->discardCount[who]++;
        -:  264:		}
       20:  265:		state->playedCards[i] = -1;
       20:  266:		state->playedCardCount--;
        -:  267:	}
       20:  268:	return 0;
        -:  269:}
        -:  270:
       20:  271:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  272:{
        -:  273:	int card;
       20:  274:	int coin_bonus = 0;       //tracks coins gain from actions
        -:  275:
        -:  276:	//check if it is the right phase
       20:  277:	if (state->phase != 0)
        -:  278:	{
    #####:  279:		return -1;
        -:  280:	}
        -:  281:
        -:  282:	//check if player has enough actions
       20:  283:	if (state->numActions < 1)
        -:  284:	{
    #####:  285:		return -1;
        -:  286:	}
        -:  287:
       20:  288:	if (handPos >= state->handCount[state->whoseTurn]) {
    #####:  289:		return -1;
        -:  290:	}
        -:  291:
        -:  292:	//get card played
       20:  293:	card = handCard(handPos, state);
        -:  294:
        -:  295:	//check if selected card is an action
       20:  296:	if (card < adventurer || card > treasure_map)
        -:  297:	{
    #####:  298:		return -1;
        -:  299:	}
        -:  300:
        -:  301:	//play card
       20:  302:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  303:	{
    #####:  304:		return -1;
        -:  305:	}
        -:  306:
        -:  307:	//reduce number of actions
       20:  308:	state->numActions--;
        -:  309:
        -:  310:	//update coins (Treasure cards may be added with card draws)
       20:  311:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  312:
       20:  313:	return 0;
        -:  314:}
        -:  315:
    #####:  316:int buyCard(int supplyPos, struct gameState *state) {
        -:  317:	int who, i;
        -:  318:	if (DEBUG) {
        -:  319:		printf("Entering buyCard...\n");
        -:  320:	}
        -:  321:
    #####:  322:	who = state->whoseTurn;
        -:  323:
    #####:  324:	if (state->numBuys < 1) {
        -:  325:		if (DEBUG)
        -:  326:			printf("You do not have any buys left\n");
    #####:  327:		return -1;
        -:  328:	}
    #####:  329:	if (supplyPos < curse || supplyPos > treasure_map) {
    #####:  330:		return -1;
        -:  331:	}
    #####:  332:	if (supplyCount(supplyPos, state) < 1) {
        -:  333:		if (DEBUG)
        -:  334:			printf("There are not any of that type of card left\n");
    #####:  335:		return -1;
        -:  336:	}
    #####:  337:	if (state->coins < getCost(supplyPos)) {
        -:  338:		if (DEBUG)
        -:  339:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  340:		return -1;
        -:  341:	}
        -:  342:	
    #####:  343:	state->phase = 1;
    #####:  344:	gainCard(supplyPos, state, 0, who); 
    #####:  345:	for (i = 0; i < state->embargoTokens[supplyPos]; i++)
    #####:  346:		gainCard(curse, state, 0, who);
        -:  347:
    #####:  348:	state->coins = (state->coins) - (getCost(supplyPos));
    #####:  349:	state->numBuys--;
        -:  350:	if (DEBUG)
        -:  351:		printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  352:	
    #####:  353:	return 0;
        -:  354:}
        -:  355:
    #####:  356:int numHandCards(struct gameState *state) {
    #####:  357:	return state->handCount[whoseTurn(state)];
        -:  358:}
        -:  359:
       20:  360:int handCard(int handPos, struct gameState *state) {
       20:  361:	int currentPlayer = whoseTurn(state);
       20:  362:	return state->hand[currentPlayer][handPos];
        -:  363:}
        -:  364:
    #####:  365:int supplyCount(int card, struct gameState *state) {
    #####:  366:	return state->supplyCount[card];
        -:  367:}
        -:  368:
    #####:  369:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  370:	int i;
    #####:  371:	int count = 0;
        -:  372:
    #####:  373:	for (i = 0; i < state->deckCount[player]; i++)
        -:  374:	{
    #####:  375:		if (state->deck[player][i] == card) count++;
        -:  376:	}
        -:  377:
    #####:  378:	for (i = 0; i < state->handCount[player]; i++)
        -:  379:	{
    #####:  380:		if (state->hand[player][i] == card) count++;
        -:  381:	}
        -:  382:
    #####:  383:	for (i = 0; i < state->discardCount[player]; i++)
        -:  384:	{
    #####:  385:		if (state->discard[player][i] == card) count++;
        -:  386:	}
        -:  387:
    #####:  388:	return count;
        -:  389:}
        -:  390:
       40:  391:int whoseTurn(struct gameState *state) {
       40:  392:	return state->whoseTurn;
        -:  393:}
        -:  394:
    #####:  395:int endTurn(struct gameState *state) {
        -:  396:	int k;
        -:  397:	int i;
    #####:  398:	int currentPlayer = whoseTurn(state);
        -:  399:
        -:  400:	//Discard hand
    #####:  401:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  402:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  403:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  404:	}
    #####:  405:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  406:
    #####:  407:	if (state->outpostPlayed == 1) {
        -:  408:		//draw 3 cards
    #####:  409:		for (k = 0; k < 3; k++) {
    #####:  410:			drawCard(state->whoseTurn, state);//Draw a card
        -:  411:		}
    #####:  412:		state->outpostTurn = 1;
        -:  413:	}
        -:  414:	else {
        -:  415:		//draw 5 cards
    #####:  416:		for (k = 0; k < 5; k++) {
    #####:  417:			drawCard(state->whoseTurn, state);//Draw a card
        -:  418:		}
        -:  419:
        -:  420:		//Code for determining the player
    #####:  421:		if (currentPlayer < (state->numPlayers - 1)) {
    #####:  422:			state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  423:		}
        -:  424:		else {
    #####:  425:			state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  426:		}
    #####:  427:		state->outpostTurn = 0;
    #####:  428:		endPlayed(state, 0); //needed to get rid of outpost on second turn
    #####:  429:		state->playedCardCount = 0;
        -:  430:	}
        -:  431:	
    #####:  432:	state->outpostPlayed = 0;
    #####:  433:	state->phase = 0;
    #####:  434:	state->numActions = 1;
    #####:  435:	state->coins = 0;
    #####:  436:	state->numBuys = 1;
        -:  437:
        -:  438:	//Update money
    #####:  439:	updateCoins(state->whoseTurn, state, 0);
        -:  440:
    #####:  441:	return 0;
        -:  442:}
        -:  443:
    #####:  444:int isGameOver(struct gameState *state) {
        -:  445:	int i;
        -:  446:	int j;
        -:  447:
        -:  448:	//if stack of Province cards is empty, the game ends
    #####:  449:	if (state->supplyCount[province] == 0)
        -:  450:	{
    #####:  451:		return 1;
        -:  452:	}
        -:  453:
        -:  454:	//if three supply pile are at 0, the game ends
    #####:  455:	j = 0;
    #####:  456:	for (i = 0; i < 25; i++)
        -:  457:	{
    #####:  458:		if (state->supplyCount[i] == 0)
        -:  459:		{
    #####:  460:			j++;
        -:  461:		}
        -:  462:	}
    #####:  463:	if (j >= 3)
        -:  464:	{
    #####:  465:		return 1;
        -:  466:	}
        -:  467:
    #####:  468:	return 0;
        -:  469:}
        -:  470:
    #####:  471:int scoreFor(int player, struct gameState *state) {
        -:  472:
        -:  473:	int i;
    #####:  474:	int score = 0;
        -:  475:	//score from hand
    #####:  476:	for (i = 0; i < state->handCount[player]; i++)
        -:  477:	{
    #####:  478:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  479:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  480:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  481:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  482:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  483:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  484:	}
        -:  485:
        -:  486:	//score from discard
    #####:  487:	for (i = 0; i < state->discardCount[player]; i++)
        -:  488:	{
    #####:  489:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  490:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  491:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  492:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  493:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  494:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  495:	}
        -:  496:
        -:  497:	//score from deck
    #####:  498:	for (i = 0; i < state->deckCount[player]; i++)
        -:  499:	{
    #####:  500:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  501:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  502:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  503:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  504:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  505:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  506:	}
        -:  507:
    #####:  508:	return score;
        -:  509:}
        -:  510:
    #####:  511:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  512:	int i;
        -:  513:	int j;
        -:  514:	int highScore;
        -:  515:	int currentPlayer;
        -:  516:
        -:  517:	//get score for each player
    #####:  518:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  519:	{
        -:  520:		//set unused player scores to -9999
    #####:  521:		if (i >= state->numPlayers)
        -:  522:		{
    #####:  523:			players[i] = -9999;
        -:  524:		}
        -:  525:		else
        -:  526:		{
    #####:  527:			players[i] = scoreFor(i, state);
        -:  528:		}
        -:  529:	}
        -:  530:
        -:  531:	//find highest score
    #####:  532:	j = 0;
    #####:  533:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  534:	{
    #####:  535:		if (players[i] > players[j])
        -:  536:		{
    #####:  537:			j = i;
        -:  538:		}
        -:  539:	}
    #####:  540:	highScore = players[j];
        -:  541:
        -:  542:	//add 1 to players who had less turns
    #####:  543:	currentPlayer = whoseTurn(state);
    #####:  544:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  545:	{
    #####:  546:		if (players[i] == highScore && i > currentPlayer)
        -:  547:		{
    #####:  548:			players[i]++;
        -:  549:		}
        -:  550:	}
        -:  551:
        -:  552:	//find new highest score
    #####:  553:	j = 0;
    #####:  554:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  555:	{
    #####:  556:		if (players[i] > players[j])
        -:  557:		{
    #####:  558:			j = i;
        -:  559:		}
        -:  560:	}
    #####:  561:	highScore = players[j];
        -:  562:
        -:  563:	//set winners in array to 1 and rest to 0
    #####:  564:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  565:	{
    #####:  566:		if (players[i] == highScore)
        -:  567:		{
    #####:  568:			players[i] = 1;
        -:  569:		}
        -:  570:		else
        -:  571:		{
    #####:  572:			players[i] = 0;
        -:  573:		}
        -:  574:	}
        -:  575:
    #####:  576:	return 0;
        -:  577:}
        -:  578:
      178:  579:int drawCard(int player, struct gameState *state)
        -:  580:{
        -:  581:	int count;
        -:  582:	int deckCounter;
      178:  583:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  584:
        -:  585:	  //Step 1 Shuffle the discard pile back into a deck
        -:  586:		int i;
        -:  587:		//Move discard to deck
      139:  588:		for (i = 0; i < state->discardCount[player]; i++) {
      115:  589:			state->deck[player][i] = state->discard[player][i];
      115:  590:			state->discard[player][i] = -1;
        -:  591:		}
        -:  592:
       24:  593:		state->deckCount[player] = state->discardCount[player];
       24:  594:		state->discardCount[player] = 0;//Reset discard
        -:  595:
        -:  596:		//Shufffle the deck
       24:  597:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  598:
        -:  599:		if (DEBUG) {//Debug statements
        -:  600:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  601:		}
        -:  602:
       24:  603:		state->discardCount[player] = 0;
        -:  604:
        -:  605:		//Step 2 Draw Card
       24:  606:		count = state->handCount[player];//Get current player's hand count
        -:  607:
        -:  608:		if (DEBUG) {//Debug statements
        -:  609:			printf("Current hand count: %d\n", count);
        -:  610:		}
        -:  611:
       24:  612:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  613:
       24:  614:		if (deckCounter == 0)
        9:  615:			return -1;
        -:  616:
       15:  617:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       15:  618:		state->deck[player][deckCounter - 1] = -1;
       15:  619:		state->deckCount[player]--;
       15:  620:		state->handCount[player]++;//Increment hand count
        -:  621:	}
        -:  622:
        -:  623:	else {
      154:  624:		int count = state->handCount[player];//Get current hand count for player
        -:  625:		int deckCounter;
        -:  626:		if (DEBUG) {//Debug statements
        -:  627:			printf("Current hand count: %d\n", count);
        -:  628:		}
        -:  629:
      154:  630:		deckCounter = state->deckCount[player];//Create holder for the deck count
      154:  631:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      154:  632:		state->deck[player][deckCounter - 1] = -1;
      154:  633:		state->deckCount[player]--;
      154:  634:		state->handCount[player]++;//Increment hand count
        -:  635:	}
        -:  636:
      169:  637:	return 0;
        -:  638:}
        -:  639:
    #####:  640:int getCost(int cardNumber)
        -:  641:{
    #####:  642:	switch (cardNumber)
        -:  643:	{
        -:  644:	case curse:
    #####:  645:		return 0;
        -:  646:	case estate:
    #####:  647:		return 2;
        -:  648:	case duchy:
    #####:  649:		return 5;
        -:  650:	case province:
    #####:  651:		return 8;
        -:  652:	case copper:
    #####:  653:		return 0;
        -:  654:	case silver:
    #####:  655:		return 3;
        -:  656:	case gold:
    #####:  657:		return 6;
        -:  658:	case adventurer:
    #####:  659:		return 6;
        -:  660:	case council_room:
    #####:  661:		return 5;
        -:  662:	case feast:
    #####:  663:		return 4;
        -:  664:	case gardens:
    #####:  665:		return 4;
        -:  666:	case mine:
    #####:  667:		return 5;
        -:  668:	case remodel:
    #####:  669:		return 4;
        -:  670:	case smithy:
    #####:  671:		return 4;
        -:  672:	case village:
    #####:  673:		return 3;
        -:  674:	case baron:
    #####:  675:		return 4;
        -:  676:	case great_hall:
    #####:  677:		return 3;
        -:  678:	case minion:
    #####:  679:		return 5;
        -:  680:	case steward:
    #####:  681:		return 3;
        -:  682:	case tribute:
    #####:  683:		return 5;
        -:  684:	case ambassador:
    #####:  685:		return 3;
        -:  686:	case cutpurse:
    #####:  687:		return 4;
        -:  688:	case embargo:
    #####:  689:		return 2;
        -:  690:	case outpost:
    #####:  691:		return 5;
        -:  692:	case salvager:
    #####:  693:		return 4;
        -:  694:	case sea_hag:
    #####:  695:		return 4;
        -:  696:	case treasure_map:
    #####:  697:		return 4;
        -:  698:	}
        -:  699:
    #####:  700:	return -1;
        -:  701:}
        -:  702:
    #####:  703:int smithyEffect(int currentPlayer, int handPos, struct gameState *state) {
        -:  704:	int i;
        -:  705:	//+3 Cards
    #####:  706:	playedCard(handPos, NULL, NULL, state);
    #####:  707:	for (i = 0; i < 3; i++) {
    #####:  708:		drawCard(currentPlayer, state);
        -:  709:	}
        -:  710:
    #####:  711:	endPlayed(state, 0);
    #####:  712:	return 0;
        -:  713:}
        -:  714:
    #####:  715:int villageEffect(int currentPlayer, int handPos, struct gameState *state) {
        -:  716:	//+1 Card
    #####:  717:	playedCard(handPos, NULL, NULL, state);
    #####:  718:	drawCard(currentPlayer, state);
        -:  719:
        -:  720:	//+2 Actions
    #####:  721:	state->numActions += state->numActions + 2;
        -:  722:
        -:  723:	//discard played card from hand
    #####:  724:	endPlayed(state, 0);
    #####:  725:	return 0;
        -:  726:}
        -:  727:
    #####:  728:int greatHallEffect(int currentPlayer, int handPos, struct gameState *state) {
        -:  729:	//+1 Card
    #####:  730:	playedCard(handPos, NULL, NULL, state);
    #####:  731:	drawCard(currentPlayer, state);
        -:  732:
        -:  733:	//+1 Actions
    #####:  734:	state->numActions++;
        -:  735:
        -:  736:	//discard card from hand
    #####:  737:	endPlayed(state, 0);
    #####:  738:	return 0;
        -:  739:}
        -:  740:
    #####:  741:int cutpurseEffect(int currentPlayer, int handPos, struct gameState *state, int* bonus) {
        -:  742:	int i, j, k;
        -:  743:
    #####:  744:	playedCard(handPos, NULL, NULL, state);
        -:  745:
    #####:  746:	*bonus += 2;
    #####:  747:	for (i = 0; i < state->numPlayers; i++) {
    #####:  748:		if (i != currentPlayer) {
    #####:  749:			for (j = 0; j < state->handCount[i]; j++) {
    #####:  750:				if (state->hand[i][j] == copper) {
    #####:  751:					discardCard(j, i, state, 0);
        -:  752:				}
    #####:  753:				if (j == state->handCount[i]) {
    #####:  754:					for (k = 0; k < state->handCount[i]; k++) {
        -:  755:						if (DEBUG)
        -:  756:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  757:					}
    #####:  758:					break;
        -:  759:				}
        -:  760:			}// end looping through hand            
        -:  761:		}  //end if not current player        
        -:  762:	}// end for             
        -:  763:
        -:  764:	//discard played card from hand
    #####:  765:	endPlayed(state, 0);
        -:  766:
    #####:  767:	return 0;
        -:  768:}
        -:  769:
    #####:  770:int councilRoomEffect(int currentPlayer, int handPos, struct gameState *state) {
        -:  771:	int i;
    #####:  772:	playedCard(handPos, NULL, NULL, state);
        -:  773:	//+4 Cards
    #####:  774:	for (i = 0; i < 4; i++) {
    #####:  775:		drawCard(currentPlayer, state);
        -:  776:	}
        -:  777:
        -:  778:	//+1 Buy
    #####:  779:	state->numBuys++;
        -:  780:
        -:  781:	//Each other player draws a card
    #####:  782:	for (i = 0; i < state->numPlayers; i++) {
    #####:  783:		if (i != currentPlayer) {
    #####:  784:			drawCard(i, state);
        -:  785:		}
        -:  786:	}
        -:  787:
        -:  788:	//put played card in played card pile
    #####:  789:	endPlayed(state, 0);
        -:  790:
    #####:  791:	return 0;
        -:  792:}
        -:  793:
        -:  794:
       20:  795:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  796:{
        -:  797:	int i;
        -:  798:	int j;
        -:  799:	int index;
       20:  800:	int currentPlayer = whoseTurn(state);
       20:  801:	int nextPlayer = currentPlayer + 1;
        -:  802:
       20:  803:	int tributeRevealedCards[2] = { -1, -1 };
        -:  804:	int temphand[MAX_HAND];// moved above the if statement
       20:  805:	int drawntreasure = 0;
        -:  806:	int cardDrawn;
       20:  807:	int z = 0;// this is the counter for the temp hand
       20:  808:	if (nextPlayer > (state->numPlayers - 1)) {
        8:  809:		nextPlayer = 0;
        -:  810:	}
        -:  811:
        -:  812:
        -:  813:	//uses switch to select card and perform actions
       20:  814:	switch (card)
        -:  815:	{
        -:  816:	case adventurer:
       20:  817:		playedCard(handPos, NULL, NULL, state);
      209:  818:		while (drawntreasure < 2) {
      178:  819:			if (drawCard(currentPlayer, state) == -1)
        9:  820:				break;
      169:  821:			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      169:  822:			if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       24:  823:				drawntreasure++;
        -:  824:			else {
      145:  825:				temphand[z] = cardDrawn;
      145:  826:				state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
      145:  827:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      145:  828:				z++;
        -:  829:			}
        -:  830:		}
      185:  831:		while (z > 0) {
      145:  832:			state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
      145:  833:			z--;
        -:  834:		}
       20:  835:		endPlayed(state, 0);
       20:  836:		return 0;
        -:  837:
        -:  838:	case council_room:
    #####:  839:		return councilRoomEffect(currentPlayer, handPos, state);
        -:  840:
        -:  841:	case feast:
    #####:  842:		if (choice1 < curse || choice1 > treasure_map)
    #####:  843:			return -1;
        -:  844:
    #####:  845:		if (supplyCount(choice1, state) <= 0) {
        -:  846:			if (DEBUG)
        -:  847:				printf("None of that card left, sorry!\n");
        -:  848:
        -:  849:			if (DEBUG) {
        -:  850:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  851:			}
    #####:  852:			return -1;
        -:  853:		}
    #####:  854:		else if (5 < getCost(choice1)) {
        -:  855:			if (DEBUG) {
        -:  856:				printf("That card is too expensive!\n");
        -:  857:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  858:			}
    #####:  859:			return -1;
        -:  860:		}	
        -:  861:
    #####:  862:		playedCard(handPos, NULL, NULL, state);
        -:  863:
        -:  864:		if (DEBUG) {
        -:  865:			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  866:		}
        -:  867:
    #####:  868:		gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  869:
        -:  870:		if (DEBUG) {
        -:  871:			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  872:		}
        -:  873:
        -:  874:		//trash feast
    #####:  875:		endPlayed(state, 1);
        -:  876:
    #####:  877:		return 0;
        -:  878:
        -:  879:	case gardens:
    #####:  880:		return -1;
        -:  881:
        -:  882:	case mine:
    #####:  883:		if (choice1 >= state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
    #####:  884:			return -1;
        -:  885:
    #####:  886:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  887:
    #####:  888:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  889:		{
    #####:  890:			return -1;
        -:  891:		}
        -:  892:
    #####:  893:		if (choice2 > gold || choice2 < copper)
        -:  894:		{
    #####:  895:			return -1;
        -:  896:		}
        -:  897:
    #####:  898:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  899:		{
    #####:  900:			return -1;
        -:  901:		}
        -:  902:
    #####:  903:		playedCard(handPos, &choice1, NULL, state);
        -:  904:
        -:  905:		//trash old treasure
    #####:  906:		discardCard(choice1, currentPlayer, state, 1);
        -:  907:
        -:  908:		//gain new treasure
    #####:  909:		gainCard(choice2, state, 2, currentPlayer);
        -:  910:
    #####:  911:		endPlayed(state, 0);
        -:  912:
    #####:  913:		return 0;
        -:  914:
        -:  915:	case remodel:
    #####:  916:		if (choice1 >= state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
    #####:  917:			return -1;
        -:  918:
    #####:  919:		if (choice2 < curse || choice2 > treasure_map)
    #####:  920:			return -1;
        -:  921:
    #####:  922:		if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  923:		{
    #####:  924:			return -1;
        -:  925:		}
        -:  926:
    #####:  927:		playedCard(handPos, &choice1, NULL, state);
        -:  928:
        -:  929:		//trash choice
    #####:  930:		discardCard(choice1, currentPlayer, state, 1);
        -:  931:
        -:  932:		//gain new card
    #####:  933:		gainCard(choice2, state, 0, currentPlayer);
        -:  934:
    #####:  935:		endPlayed(state, 0);
    #####:  936:		return 0;
        -:  937:
        -:  938:	case smithy:
    #####:  939:		return smithyEffect(currentPlayer, handPos, state);
        -:  940:
        -:  941:	case village:
    #####:  942:		return villageEffect(currentPlayer, handPos, state);
        -:  943:
        -:  944:	case baron:
    #####:  945:		if (!(choice1 == 1 || choice1 == 2))
    #####:  946:			return -1;
        -:  947:
    #####:  948:		if (choice1 == 1) {//Boolean true or going to discard an estate
    #####:  949:			int p = 0;//Iterator for hand!
    #####:  950:			int card_not_discarded = 1;//Flag for discard set!
    #####:  951:			while (card_not_discarded) {
    #####:  952:				if (p >= state->handCount[currentPlayer]) {
        -:  953:					if (DEBUG) {
        -:  954:						printf("No estate cards in your hand, invalid choice\n");						
        -:  955:					}
    #####:  956:					return -1;
        -:  957:				}
    #####:  958:				else if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####:  959:					playedCard(handPos, &p, NULL, state);
    #####:  960:					*bonus += 4;//Add 4 coins to the amount of coins
    #####:  961:					discardCard(p, currentPlayer, state, 0);
    #####:  962:					card_not_discarded = 0;//Exit the loop
        -:  963:				}
        -:  964:				else {
    #####:  965:					p++;//Next card
        -:  966:				}
        -:  967:			}
        -:  968:		}
        -:  969:
        -:  970:		else {
    #####:  971:			playedCard(handPos, NULL, NULL, state);
    #####:  972:			gainCard(estate, state, 0, currentPlayer);//Gain an estate	
        -:  973:		}
    #####:  974:		state->numBuys++;//Increase buys by 1!
    #####:  975:		endPlayed(state, 0);
    #####:  976:		return 0;
        -:  977:
        -:  978:	case great_hall:
    #####:  979:		return greatHallEffect(currentPlayer, handPos, state);
        -:  980:
        -:  981:	case minion:
    #####:  982:		if (!(choice1 == 1 || choice1 == 2))
    #####:  983:			return -1;
        -:  984:
    #####:  985:		playedCard(handPos, NULL, NULL, state);
        -:  986:
        -:  987:		//+1 action
    #####:  988:		state->numActions++;
        -:  989:
    #####:  990:		if (choice1 == 1)      //+2 coins
        -:  991:		{
    #####:  992:			*bonus += 2;
        -:  993:		}
        -:  994:
    #####:  995:		else if (choice1 == 2)     //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  996:		{
        -:  997:			//discard hand
    #####:  998:			while (numHandCards(state) > 0)
        -:  999:			{
    #####: 1000:				discardCard(0, currentPlayer, state, 0);
        -: 1001:			}
        -: 1002:
        -: 1003:			//draw 4
    #####: 1004:			for (i = 0; i < 4; i++)
        -: 1005:			{
    #####: 1006:				drawCard(currentPlayer, state);
        -: 1007:			}
        -: 1008:
        -: 1009:			//other players discard hand and redraw if hand size > 4
    #####: 1010:			for (i = 0; i < state->numPlayers; i++)
        -: 1011:			{
    #####: 1012:				if (i != currentPlayer)
        -: 1013:				{
    #####: 1014:					if (state->handCount[i] > 4)
        -: 1015:					{
        -: 1016:						//discard hand
    #####: 1017:						while (state->handCount[i] > 0)
        -: 1018:						{
    #####: 1019:							discardCard(0, i, state, 0);
        -: 1020:						}
        -: 1021:
        -: 1022:						//draw 4
    #####: 1023:						for (j = 0; j < 4; j++)
        -: 1024:						{
    #####: 1025:							drawCard(i, state);
        -: 1026:						}
        -: 1027:					}
        -: 1028:				}
        -: 1029:			}
        -: 1030:
        -: 1031:		}
    #####: 1032:		endPlayed(state, 0);
    #####: 1033:		return 0;
        -: 1034:
        -: 1035:	case steward:
    #####: 1036:		if (!(choice1 == 1 || choice1 == 2 || choice1 == 3))
    #####: 1037:			return -1;
    #####: 1038:		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
    #####: 1039:			return -1;
        -: 1040:
    #####: 1041:		if (choice1 == 1)
        -: 1042:		{
    #####: 1043:			playedCard(handPos, NULL, NULL, state);
        -: 1044:			//+2 cards
    #####: 1045:			drawCard(currentPlayer, state);
    #####: 1046:			drawCard(currentPlayer, state);
        -: 1047:		}
    #####: 1048:		else if (choice1 == 2)
        -: 1049:		{
        -: 1050:			//+2 coins
    #####: 1051:			playedCard(handPos, NULL, NULL, state);
    #####: 1052:			*bonus += 2;
        -: 1053:		}
        -: 1054:		else
        -: 1055:		{
    #####: 1056:			playedCard(handPos, &choice2, &choice3, state);
        -: 1057:			//trash 2 cards in hand
    #####: 1058:			if (choice2 < choice3) {
    #####: 1059:				int tmp = choice2;
    #####: 1060:				choice2 = choice3;
    #####: 1061:				choice3 = tmp;
        -: 1062:			}
        -: 1063:
        -: 1064:			//discard order matters, must discard max to min for correct effect
    #####: 1065:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1066:			discardCard(choice3, currentPlayer, state, 1);			
        -: 1067:		}
    #####: 1068:		endPlayed(state, 0);
    #####: 1069:		return 0;
        -: 1070:
        -: 1071:	case tribute:
    #####: 1072:		playedCard(handPos, NULL, NULL, state);
    #####: 1073:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1074:			if (state->deckCount[nextPlayer] > 0) {
    #####: 1075:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1076:				state->deckCount[nextPlayer]--;
    #####: 1077:				state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[0];
    #####: 1078:				state->discardCount[nextPlayer]++;
        -: 1079:			}
    #####: 1080:			else if (state->discardCount[nextPlayer] > 0) {
    #####: 1081:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
        -: 1082:			}
        -: 1083:			else {
        -: 1084:				//No Card to Reveal
        -: 1085:				if (DEBUG) {
        -: 1086:					printf("No cards to reveal\n");
        -: 1087:				}
    #####: 1088:				endPlayed(state, 0);
    #####: 1089:				return 0;
        -: 1090:			}
        -: 1091:		}
        -: 1092:
        -: 1093:		else {
    #####: 1094:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1095:				j = state->discardCount[nextPlayer];
    #####: 1096:				for (i = 0; i < j; i++) {
    #####: 1097:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1098:					state->deckCount[nextPlayer]++;
    #####: 1099:					state->discard[nextPlayer][i] = -1;
    #####: 1100:					state->discardCount[nextPlayer]--;
        -: 1101:				}
        -: 1102:
    #####: 1103:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1104:			}
    #####: 1105:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1106:			state->deck[nextPlayer][state->deckCount[nextPlayer] - 1] = -1;
    #####: 1107:			state->deckCount[nextPlayer]--;
        -: 1108:
    #####: 1109:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1110:				j = state->discardCount[nextPlayer];
    #####: 1111:				for (i = 0; i < j; i++) {
    #####: 1112:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1113:					state->deckCount[nextPlayer]++;
    #####: 1114:					state->discard[nextPlayer][i] = -1;
    #####: 1115:					state->discardCount[nextPlayer]--;
        -: 1116:				}
        -: 1117:
    #####: 1118:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1119:			}
        -: 1120:
    #####: 1121:			state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[0];
    #####: 1122:			state->discardCount[nextPlayer]++;
        -: 1123:
    #####: 1124:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1125:			state->deck[nextPlayer][state->deckCount[nextPlayer] - 1] = -1;
    #####: 1126:			state->deckCount[nextPlayer]--;
    #####: 1127:			state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[1];
    #####: 1128:			state->discardCount[nextPlayer]++;
        -: 1129:		}
        -: 1130:
    #####: 1131:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
    #####: 1132:			tributeRevealedCards[1] = -1;
        -: 1133:		}
        -: 1134:
    #####: 1135:		for (i = 0; i < 2; i++) {
    #####: 1136:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1137:				*bonus += 2;
        -: 1138:			}
        -: 1139:
    #####: 1140:			if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1141:				drawCard(currentPlayer, state);
    #####: 1142:				drawCard(currentPlayer, state);
        -: 1143:			}
    #####: 1144:			if (tributeRevealedCards[i] >= adventurer && tributeRevealedCards[i] <= treasure_map){//Action Card
    #####: 1145:				state->numActions = state->numActions + 2;
        -: 1146:			}
        -: 1147:		}
        -: 1148:
    #####: 1149:		endPlayed(state, 0);
        -: 1150:
    #####: 1151:		return 0;
        -: 1152:
        -: 1153:	case ambassador:
    #####: 1154:		j = 0;        //used to check if player has enough cards to discard
        -: 1155:
    #####: 1156:		if (choice2 > 2 || choice2 < 0)
        -: 1157:		{
    #####: 1158:			return -1;
        -: 1159:		}
        -: 1160:
    #####: 1161:		if (choice1 == handPos || choice1 >= numHandCards(state) || choice1 < 0)
        -: 1162:		{
    #####: 1163:			return -1;
        -: 1164:		}
        -: 1165:
    #####: 1166:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1167:		{
    #####: 1168:			if (i != handPos && i == state->hand[currentPlayer][choice1])
        -: 1169:			{
    #####: 1170:				j++;
        -: 1171:			}
        -: 1172:		}
    #####: 1173:		if (j < choice2)
        -: 1174:		{
    #####: 1175:			return -1;
        -: 1176:		}
        -: 1177:
    #####: 1178:		playedCard(handPos, &choice1, NULL, state);
        -: 1179:
        -: 1180:		if (DEBUG)
        -: 1181:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1182:
        -: 1183:		//increase supply count for choosen card by amount being discarded
    #####: 1184:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1185:
        -: 1186:		//each other player gains a copy of revealed card
    #####: 1187:		for (i = 0; i < state->numPlayers; i++)
        -: 1188:		{
    #####: 1189:			if (i != currentPlayer)
        -: 1190:			{
    #####: 1191:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1192:			}
        -: 1193:		}
        -: 1194:
        -: 1195:		//trash copies of cards returned to supply
    #####: 1196:		for (j = 0; j < choice2; j++)
        -: 1197:		{
    #####: 1198:			for (i = state->handCount[currentPlayer] - 1; i >= 0; i--)
        -: 1199:			{
    #####: 1200:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1201:				{
    #####: 1202:					discardCard(i, currentPlayer, state, 1);
    #####: 1203:					break;
        -: 1204:				}
        -: 1205:			}
        -: 1206:		}
        -: 1207:
    #####: 1208:		endPlayed(state, 0);
        -: 1209:
    #####: 1210:		return 0;
        -: 1211:
        -: 1212:	case cutpurse:
    #####: 1213:		return cutpurseEffect(currentPlayer, handPos, state, bonus);
        -: 1214:
        -: 1215:	case embargo:
    #####: 1216:		if (choice1 < curse || choice1 > treasure_map)
    #####: 1217:			return -1;
        -: 1218:		//see if selected pile is in play
    #####: 1219:		if (state->supplyCount[choice1] == -1)
        -: 1220:		{
    #####: 1221:			return -1;
        -: 1222:		}
        -: 1223:
    #####: 1224:		playedCard(handPos, NULL, NULL, state);
        -: 1225:
        -: 1226:		//+2 Coins
    #####: 1227:		*bonus += 2;
        -: 1228:
        -: 1229:		//add embargo token to selected supply pile
    #####: 1230:		state->embargoTokens[choice1]++;
        -: 1231:
        -: 1232:		//trash card
    #####: 1233:		endPlayed(state, 1);
    #####: 1234:		return 0;
        -: 1235:
        -: 1236:	case outpost:
    #####: 1237:		if (state->outpostTurn == 1)
    #####: 1238:			return -1;
        -: 1239:		
    #####: 1240:		playedCard(handPos, NULL, NULL, state);
        -: 1241:		//set outpost flag
    #####: 1242:		state->outpostPlayed = 1;
        -: 1243:
        -: 1244:		//we actually don't call endPlayed() here on purpose
    #####: 1245:		return 0;
        -: 1246:
        -: 1247:	case salvager:
    #####: 1248:		if (choice1 >= state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
    #####: 1249:			return -1;
        -: 1250:
    #####: 1251:		playedCard(handPos, &choice1, NULL, state);
        -: 1252:
        -: 1253:		//+1 buy
    #####: 1254:		state->numBuys++;
        -: 1255:		
        -: 1256:		//gain coins equal to trashed card
    #####: 1257:		*bonus += getCost(handCard(choice1, state));
        -: 1258:		
        -: 1259:		//trash card
    #####: 1260:		discardCard(choice1, currentPlayer, state, 1);
        -: 1261:		
    #####: 1262:		endPlayed(state, 0);
    #####: 1263:		return 0;
        -: 1264:
        -: 1265:	case sea_hag:
    #####: 1266:		playedCard(handPos, NULL, NULL, state);
    #####: 1267:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1268:			if (i != currentPlayer) {
    #####: 1269:				if (state->deckCount[i] + state->discardCount[i] > 0) {
    #####: 1270:					if (state->deckCount[i] == 0) {
    #####: 1271:						j = state->discardCount[i];
    #####: 1272:						for (index = 0; index < j; index++) {
    #####: 1273:							state->deck[i][index] = state->discard[i][index];//Move to deck
    #####: 1274:							state->deckCount[i]++;
    #####: 1275:							state->discard[i][index] = -1;
    #####: 1276:							state->discardCount[i]--;
        -: 1277:						}
        -: 1278:
    #####: 1279:						shuffle(i, state);//Shuffle the deck
        -: 1280:					}
    #####: 1281:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i] - 1];
    #####: 1282:					state->discardCount[i]++;
        -: 1283:					//conveniently, this happens to add it to the top of the deck
    #####: 1284:					gainCard(curse, state, 1, i);
        -: 1285:				}
        -: 1286:				else { //literally no cards in their deck or discard, so they just get a curse in their deck
    #####: 1287:					gainCard(curse, state, 1, i);
        -: 1288:				}				
        -: 1289:			}
        -: 1290:		}
    #####: 1291:		endPlayed(state, 0);
    #####: 1292:		return 0;
        -: 1293:
        -: 1294:	case treasure_map:
        -: 1295:		//search hand for another treasure_map
    #####: 1296:		index = -1;
    #####: 1297:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1298:		{
    #####: 1299:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1300:			{
    #####: 1301:				index = i;
    #####: 1302:				break;
        -: 1303:			}
        -: 1304:		}
    #####: 1305:		if (index > -1){
    #####: 1306:			playedCard(handPos, &index, NULL, state);
        -: 1307:			//trash other treasure_map
    #####: 1308:			discardCard(index, currentPlayer, state, 1);
        -: 1309:
        -: 1310:			//gain 4 Gold cards
    #####: 1311:			for (i = 0; i < 4; i++)
        -: 1312:			{
    #####: 1313:				gainCard(gold, state, 1, currentPlayer);
        -: 1314:			}
        -: 1315:		}
        -: 1316:		else {
    #####: 1317:			return -1;
        -: 1318:		}
    #####: 1319:		endPlayed(state, 1);
    #####: 1320:		return 0;
        -: 1321:		
        -: 1322:	}
        -: 1323:
    #####: 1324:	return -1;
        -: 1325:}
        -: 1326:
    #####: 1327:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1328:{
        -: 1329:
        -: 1330:	//if card is not trashed, added to discard
    #####: 1331:	if (trashFlag < 1)
        -: 1332:	{
        -: 1333:		//add card to discard pile
    #####: 1334:		state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][handPos];
    #####: 1335:		state->discardCount[currentPlayer]++;
        -: 1336:	}
        -: 1337:
        -: 1338:	//set played card to -1
    #####: 1339:	state->hand[currentPlayer][handPos] = -1;
        -: 1340:
        -: 1341:	//remove card from player's hand
    #####: 1342:	if (handPos == (state->handCount[currentPlayer] - 1))   //last card in hand array is played
        -: 1343:	{
        -: 1344:		//reduce number of cards in hand
    #####: 1345:		state->handCount[currentPlayer]--;
        -: 1346:	}
    #####: 1347:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1348:	{
        -: 1349:		//reduce number of cards in hand
    #####: 1350:		state->handCount[currentPlayer]--;
        -: 1351:	}
        -: 1352:	else
        -: 1353:	{
        -: 1354:		//replace discarded card with last card in hand
    #####: 1355:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1356:		//set last card to -1
    #####: 1357:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1358:		//reduce number of cards in hand
    #####: 1359:		state->handCount[currentPlayer]--;
        -: 1360:	}
        -: 1361:
    #####: 1362:	return 0;
        -: 1363:}
        -: 1364:
    #####: 1365:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1366:{
        -: 1367:	//Note: supplyPos is enum of choosen card
        -: 1368:
        -: 1369:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1370:	if (supplyCount(supplyPos, state) < 1)
        -: 1371:	{
    #####: 1372:		return -1;
        -: 1373:	}
        -: 1374:
        -: 1375:	//added card for [whoseTurn] current player:
        -: 1376:	// toFlag = 0 : add to discard
        -: 1377:	// toFlag = 1 : add to deck
        -: 1378:	// toFlag = 2 : add to hand
        -: 1379:
    #####: 1380:	if (toFlag == 1)
        -: 1381:	{
    #####: 1382:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1383:		state->deckCount[player]++;
        -: 1384:	}
    #####: 1385:	else if (toFlag == 2)
        -: 1386:	{
    #####: 1387:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1388:		state->handCount[player]++;
        -: 1389:	}
        -: 1390:	else
        -: 1391:	{
    #####: 1392:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1393:		state->discardCount[player]++;
        -: 1394:	}
        -: 1395:
        -: 1396:	//decrease number in supply pile
    #####: 1397:	state->supplyCount[supplyPos]--;
        -: 1398:
    #####: 1399:	return 0;
        -: 1400:}
        -: 1401:
       20: 1402:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1403:{
        -: 1404:	int i;
        -: 1405:	static int cumulative = 0;
        -: 1406:	static int lastPlayer = -1;
        -: 1407:
       20: 1408:	if (lastPlayer == player) {
        6: 1409:		cumulative += bonus;
        -: 1410:	}
        -: 1411:	else {
       14: 1412:		cumulative = bonus;
       14: 1413:		lastPlayer = player;
        -: 1414:	}
        -: 1415:
        -: 1416:	//reset coin count
       20: 1417:	state->coins = 0;
        -: 1418:
        -: 1419:	//add coins for each Treasure card in player's hand
      116: 1420:	for (i = 0; i < state->handCount[player]; i++)
        -: 1421:	{
       96: 1422:		if (state->hand[player][i] == copper)
        -: 1423:		{
       16: 1424:			state->coins += 1;
        -: 1425:		}
       80: 1426:		else if (state->hand[player][i] == silver)
        -: 1427:		{
        4: 1428:			state->coins += 2;
        -: 1429:		}
       76: 1430:		else if (state->hand[player][i] == gold)
        -: 1431:		{
       12: 1432:			state->coins += 3;
        -: 1433:		}
        -: 1434:	}
        -: 1435:
        -: 1436:	//add bonus
       20: 1437:	state->coins += cumulative;
        -: 1438:
       20: 1439:	return 0;
        -: 1440:}
        -: 1441:
        -: 1442:
        -: 1443://end of dominion.c
