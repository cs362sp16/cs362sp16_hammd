Start unittest1 for initializeGame()
Start 2 Player test
Failed Assert: Hand count wrong:Expected(5),Actual(0)
Failed Assert: Deck count wrong:Expected(5),Actual(10)
Failed Assert: Copper count:Expected(7),Actual(4)
Failed Assert: Estate count:Expected(3),Actual(1)
Start 3 Player test
Failed Assert: Hand count wrong:Expected(5),Actual(0)
Failed Assert: Deck count wrong:Expected(5),Actual(10)
Failed Assert: Hand count wrong:Expected(5),Actual(0)
Failed Assert: Deck count wrong:Expected(5),Actual(10)
Failed Assert: Copper count:Expected(7),Actual(4)
Failed Assert: Estate count:Expected(3),Actual(1)
Failed Assert: Copper count:Expected(7),Actual(4)
Failed Assert: Estate count:Expected(3),Actual(1)
Start 4 Player test
Failed Assert: Hand count wrong:Expected(5),Actual(0)
Failed Assert: Deck count wrong:Expected(5),Actual(10)
Failed Assert: Hand count wrong:Expected(5),Actual(0)
Failed Assert: Deck count wrong:Expected(5),Actual(10)
Failed Assert: Hand count wrong:Expected(5),Actual(0)
Failed Assert: Deck count wrong:Expected(5),Actual(10)
Failed Assert: Copper count:Expected(7),Actual(4)
Failed Assert: Estate count:Expected(3),Actual(1)
Failed Assert: Copper count:Expected(7),Actual(4)
Failed Assert: Estate count:Expected(3),Actual(1)
Failed Assert: Copper count:Expected(7),Actual(4)
Failed Assert: Estate count:Expected(3),Actual(1)
Start 5 Player test
File 'dominion.c'
Lines executed:17.32% of 560
Creating 'dominion.c.gcov'

--------------------
Start unittest2 for playCard()
Test playCard() with a card that gives actions and cards
Failed Assert: Discard count should increase by 1.:Expected(1),Actual(0)
Failed Assert: Coins should stay the same.:Expected(0),Actual(5)
Test playCard() with a card that gives buys
Failed Assert: Discard count should increase by 1.:Expected(1),Actual(0)
Failed Assert: Coins should stay the same.:Expected(0),Actual(8)
Test playCard() with a card that gives coins
Failed Assert: Discard count should increase by 1.:Expected(1),Actual(0)
Failed Assert: Coins should increase by 2.:Expected(2),Actual(4)
File 'dominion.c'
Lines executed:26.61% of 560
Creating 'dominion.c.gcov'

--------------------
Start unittest3 for kingdomCards()
File 'dominion.c'
Lines executed:28.93% of 560
Creating 'dominion.c.gcov'

--------------------
Start unittest4 for handCard()
File 'dominion.c'
Lines executed:28.93% of 560
Creating 'dominion.c.gcov'

--------------------
Starting cardtest1
Test when both copper on top of deck.
Failed Assert: The copper was not added.:Expected(4),Actual(7)
Failed Assert: The hand size should increase by one.:Expected(6),Actual(7)
Test when both copper on the bottom of the deck.
Failed Assert: The copper was not added.:Expected(4),Actual(7)
Failed Assert: The hand size should increase by one.:Expected(6),Actual(7)
Test when both copper are in the middle of the deck.
Failed Assert: The copper was not added.:Expected(4),Actual(7)
Failed Assert: The hand size should increase by one.:Expected(6),Actual(7)
Test when we need to shuffle in discard pile to get the second copper.
Failed Assert: The copper was not added.:Expected(4),Actual(7)
Failed Assert: The hand size should increase by one.:Expected(6),Actual(7)
Test when we only have one copper to get.
Failed Assert: The copper was not added.:Expected(4),Actual(7)
Failed Assert: The hand size should stay the same.:Expected(5),Actual(6)
File 'dominion.c'
Lines executed:34.82% of 560
Creating 'dominion.c.gcov'

--------------------
Starting cardtest2
Test Council_Room for 2 players.
Failed Assert: The council_room was not discarded.:Expected(1),Actual(0)
Test Council_Room for 3 players.
Failed Assert: The council_room was not discarded.:Expected(1),Actual(0)
Test Council_Room for 4 players.
Failed Assert: The council_room was not discarded.:Expected(1),Actual(0)
File 'dominion.c'
Lines executed:34.82% of 560
Creating 'dominion.c.gcov'

--------------------
Starting cardtest3
Test Village card effect.
Failed Assert: The discard size should increase by 1.:Expected(1),Actual(0)
File 'dominion.c'
Lines executed:34.82% of 560
Creating 'dominion.c.gcov'

--------------------
Starting cardtest4
Test Great Hall card effect.
Failed Assert: The discard size should increase by 1.:Expected(1),Actual(0)
File 'dominion.c'
Lines executed:35.54% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      589:    8:int compare(const void* a, const void* b) {
      589:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      589:   11:  if (*(int*)a < *(int*)b)
      210:   12:    return -1;
      379:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        1:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
        1:   23:  int* k = malloc(10 * sizeof(int));
        1:   24:  k[0] = k1;
        1:   25:  k[1] = k2;
        1:   26:  k[2] = k3;
        1:   27:  k[3] = k4;
        1:   28:  k[4] = k5;
        1:   29:  k[5] = k6;
        1:   30:  k[6] = k7;
        1:   31:  k[7] = k8;
        1:   32:  k[8] = k9;
        1:   33:  k[9] = k10;
        1:   34:  return k;
        -:   35:}
        -:   36:
       18:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38: struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       18:   44:  SelectStream(1);
       18:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       18:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:  {
        1:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
       17:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      187:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     1870:   59:    for (j = 0; j < 10; j++)
        -:   60:    {
     1700:   61:     if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:     {
    #####:   63:       return -1;
        -:   64:     }
        -:   65:   }
        -:   66: }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       17:   73: if (numPlayers == 2)
        -:   74: {
       12:   75:  state->supplyCount[curse] = 10;
        -:   76:}
        5:   77:else if (numPlayers == 3)
        -:   78:{
        2:   79:  state->supplyCount[curse] = 20;
        -:   80:}
        -:   81:else
        -:   82:{
        3:   83:  state->supplyCount[curse] = 30;
        -:   84:}
        -:   85:
        -:   86:  //set number of Victory cards
       17:   87:if (numPlayers == 2)
        -:   88:{
       12:   89:  state->supplyCount[estate] = 8;
       12:   90:  state->supplyCount[duchy] = 8;
       12:   91:  state->supplyCount[province] = 8;
        -:   92:}
        -:   93:else
        -:   94:{
        5:   95:  state->supplyCount[estate] = 12;
        5:   96:  state->supplyCount[duchy] = 12;
        5:   97:  state->supplyCount[province] = 12;
        -:   98:}
        -:   99:
        -:  100:  //set number of Treasure cards
       17:  101:state->supplyCount[copper] = 60 - (7 * numPlayers);
       17:  102:state->supplyCount[silver] = 40;
       17:  103:state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      357:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
     2805:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:      {
     2635:  110:       if (kingdomCards[j] == i)
        -:  111:       {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      170:  113:         if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:         {
       20:  115:          if (numPlayers == 2){ 
        7:  116:            state->supplyCount[i] = 8; 
        -:  117:          }
        3:  118:          else{ state->supplyCount[i] = 12; }
        -:  119:        }
        -:  120:        else
        -:  121:        {
      160:  122:          state->supplyCount[i] = 10;
        -:  123:        }
      170:  124:        break;
        -:  125:      }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:   {
     2465:  128:     state->supplyCount[i] = -1;
        -:  129:   }
        -:  130: }
        -:  131:
        -:  132:}
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       59:  138:for (i = 0; i < numPlayers; i++)
        -:  139:{
       42:  140:  state->deckCount[i] = 0;
      168:  141:  for (j = 0; j < 3; j++)
        -:  142:  {
      126:  143:   state->deck[i][j] = estate;
      126:  144:   state->deckCount[i]++;
        -:  145: }
      336:  146: for (j = 3; j < 10; j++)
        -:  147: {
      294:  148:   state->deck[i][j] = copper;
      294:  149:   state->deckCount[i]++;		
        -:  150: }
        -:  151:}
        -:  152:
        -:  153:  //shuffle player decks
       59:  154:for (i = 0; i < numPlayers; i++)
        -:  155:{
       42:  156:  if ( shuffle(i, state) < 0 )
        -:  157:  {
    #####:  158:   return -1;
        -:  159: }
        -:  160:}
        -:  161:
        -:  162:  //draw player hands
       59:  163:for (i = 0; i < numPlayers; i++)
        -:  164:{  
        -:  165:      //initialize hand size to zero
       42:  166:  state->handCount[i] = 0;
       42:  167:  state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:}
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      476:  176:for (i = 0; i <= treasure_map; i++)
        -:  177:{
      459:  178:  state->embargoTokens[i] = 0;
        -:  179:}
        -:  180:
        -:  181:  //initialize first player's turn
       17:  182:state->outpostPlayed = 0;
       17:  183:state->phase = 0;
       17:  184:state->numActions = 1;
       17:  185:state->numBuys = 1;
       17:  186:state->playedCardCount = 0;
       17:  187:state->whoseTurn = 0;
       17:  188:state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      102:  192:for (it = 0; it < 5; it++){
       85:  193:  drawCard(state->whoseTurn, state);
        -:  194:}
        -:  195:
       17:  196:updateCoins(state->whoseTurn, state, 0);
        -:  197:
       17:  198:return 0;
        -:  199:}
        -:  200:
       46:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       46:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       46:  209:  if (state->deckCount[player] < 1)
        3:  210:    return -1;
       43:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      508:  214:  while (state->deckCount[player] > 0) {
      422:  215:    card = floor(Random() * state->deckCount[player]);
      422:  216:    newDeck[newDeckPos] = state->deck[player][card];
      422:  217:    newDeckPos++;
     1364:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      942:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      422:  221:    state->deckCount[player]--;
        -:  222:  }
      465:  223:  for (i = 0; i < newDeckPos; i++) {
      422:  224:    state->deck[player][i] = newDeck[i];
      422:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       43:  228:  return 0;
        -:  229:}
        -:  230:
        3:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        3:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        3:  237:  if (state->phase != 0)
        -:  238:  {
    #####:  239:    return -1;
        -:  240:  }
        -:  241:  
        -:  242:  //check if player has enough actions
        3:  243:  if ( state->numActions < 1 )
        -:  244:  {
    #####:  245:    return -1;
        -:  246:  }
        -:  247:  
        -:  248:  //get card played
        3:  249:  card = handCard(handPos, state);
        -:  250:  
        -:  251:  //check if selected card is an action
        3:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:  {
    #####:  254:    return -1;
        -:  255:  }
        -:  256:  
        -:  257:  //play card
        3:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:  {
    #####:  260:    return -1;
        -:  261:  }
        -:  262:  
        -:  263:  //reduce number of actions
        3:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        3:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:  
        3:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:    
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:  
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
       23:  315:int handCard(int handPos, struct gameState *state) {
       23:  316:  int currentPlayer = whoseTurn(state);
       23:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:  {
    #####:  330:    if (state->deck[player][i] == card) count++;
        -:  331:  }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:  {
    #####:  335:    if (state->hand[player][i] == card) count++;
        -:  336:  }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:  {
    #####:  340:    if (state->discard[player][i] == card) count++;
        -:  341:  }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       36:  346:int whoseTurn(struct gameState *state) {
       36:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:  
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:  
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:  {
    #####:  397:    return 1;
        -:  398:  }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:  {
    #####:  404:    if (state->supplyCount[i] == 0)
        -:  405:    {
    #####:  406:     j++;
        -:  407:   }
        -:  408: }
    #####:  409: if ( j >= 3)
        -:  410: {
    #####:  411:  return 1;
        -:  412:}
        -:  413:
    #####:  414:return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:  {
    #####:  424:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:  }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:  {
    #####:  435:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:  }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:  {
    #####:  446:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:  }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:  {
        -:  466:      //set unused player scores to -9999
    #####:  467:    if (i >= state->numPlayers)
        -:  468:    {
    #####:  469:     players[i] = -9999;
        -:  470:   }
        -:  471:   else
        -:  472:   {
    #####:  473:     players[i] = scoreFor (i, state);
        -:  474:   }
        -:  475: }
        -:  476:
        -:  477:  //find highest score
    #####:  478: j = 0;
    #####:  479: for (i = 0; i < MAX_PLAYERS; i++)
        -:  480: {
    #####:  481:  if (players[i] > players[j])
        -:  482:  {
    #####:  483:   j = i;
        -:  484: }
        -:  485:}
    #####:  486:highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:currentPlayer = whoseTurn(state);
    #####:  490:for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:{
    #####:  492:  if ( players[i] == highScore && i > currentPlayer )
        -:  493:  {
    #####:  494:   players[i]++;
        -:  495: }
        -:  496:}
        -:  497:
        -:  498:  //find new highest score
    #####:  499:j = 0;
    #####:  500:for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:{
    #####:  502:  if ( players[i] > players[j] )
        -:  503:  {
    #####:  504:   j = i;
        -:  505: }
        -:  506:}
    #####:  507:highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:{
    #####:  512:  if ( players[i] == highScore )
        -:  513:  {
    #####:  514:   players[i] = 1;
        -:  515: }
        -:  516: else
        -:  517: {
    #####:  518:   players[i] = 0;
        -:  519: }
        -:  520:}
        -:  521:
    #####:  522:return 0;
        -:  523:}
        -:  524:
      134:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      134:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        4:  533:    for (i = 0; i < state->discardCount[player];i++){
        2:  534:      state->deck[player][i] = state->discard[player][i];
        2:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:    
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
        1:  560:      return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      132:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      132:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      132:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      132:  576:    state->deckCount[player]--;
      132:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      133:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:  {
        -:  587:    case curse:
    #####:  588:    return 0;
        -:  589:    case estate:
    #####:  590:    return 2;
        -:  591:    case duchy:
    #####:  592:    return 5;
        -:  593:    case province:
    #####:  594:    return 8;
        -:  595:    case copper:
    #####:  596:    return 0;
        -:  597:    case silver:
    #####:  598:    return 3;
        -:  599:    case gold:
    #####:  600:    return 6;
        -:  601:    case adventurer:
    #####:  602:    return 6;
        -:  603:    case council_room:
    #####:  604:    return 5;
        -:  605:    case feast:
    #####:  606:    return 4;
        -:  607:    case gardens:
    #####:  608:    return 4;
        -:  609:    case mine:
    #####:  610:    return 5;
        -:  611:    case remodel:
    #####:  612:    return 4;
        -:  613:    case smithy:
    #####:  614:    return 4;
        -:  615:    case village:
    #####:  616:    return 3;
        -:  617:    case baron:
    #####:  618:    return 4;
        -:  619:    case great_hall:
    #####:  620:    return 3;
        -:  621:    case minion:
    #####:  622:    return 5;
        -:  623:    case steward:
    #####:  624:    return 3;
        -:  625:    case tribute:
    #####:  626:    return 5;
        -:  627:    case ambassador:
    #####:  628:    return 3;
        -:  629:    case cutpurse:
    #####:  630:    return 4;
        -:  631:    case embargo: 
    #####:  632:    return 2;
        -:  633:    case outpost:
    #####:  634:    return 5;
        -:  635:    case salvager:
    #####:  636:    return 4;
        -:  637:    case sea_hag:
    #####:  638:    return 4;
        -:  639:    case treasure_map:
    #####:  640:    return 4;
        -:  641:  }
        -:  642:  
    #####:  643:  return -1;
        -:  644:}
        -:  645:
       13:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
       13:  652:  int currentPlayer = whoseTurn(state);
       13:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
       13:  655:  int tributeRevealedCards[2] = {-1, -1};
       13:  656:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  657:    nextPlayer = 0;
        -:  658:  }
        -:  659:  
        -:  660:  
        -:  661:  //uses switch to select card and perform actions
       13:  662:  switch( card ) 
        -:  663:  {
        -:  664:    case adventurer:
        5:  665:    return adventurerCardEffect(state, handPos, currentPlayer);
        -:  666:    
        -:  667:    case council_room:
        4:  668:    return council_roomCardEffect(state, handPos, currentPlayer);
        -:  669:    
        -:  670:    case feast:
    #####:  671:    return feastCardEffect(state, handPos, currentPlayer, choice1);
        -:  672:    
        -:  673:    case gardens:
    #####:  674:    return -1;
        -:  675:    
        -:  676:    case mine:
    #####:  677:    return mineCardEffect(state, handPos, currentPlayer, choice1, choice2);
        -:  678:    
        -:  679:    case remodel:
    #####:  680:    return remodelCardEffect(state, handPos, currentPlayer, choice1, choice2);
        -:  681:    
        -:  682:    case smithy:
    #####:  683:    return smithyCardEffect(state, handPos, currentPlayer);
        -:  684:    
        -:  685:    case village:
        -:  686:      //+1 Card
        2:  687:    drawCard(currentPlayer, state);
        -:  688:    
        -:  689:      //+2 Actions
        2:  690:    state->numActions = state->numActions + 2;
        -:  691:    
        -:  692:      //discard played card from hand
        2:  693:    discardCard(handPos, currentPlayer, state, 0);
        2:  694:    return 0;
        -:  695:    
        -:  696:    case baron:
    #####:  697:      state->numBuys++;//Increase buys by 1!
    #####:  698:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  699:      	int p = 0;//Iterator for hand!
    #####:  700:      	int card_not_discarded = 1;//Flag for discard set!
    #####:  701:      	while(card_not_discarded){
    #####:  702:      	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  703:      	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  704:      	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  705:      	    state->discardCount[currentPlayer]++;
    #####:  706:      	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  707:             state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  708:           }
    #####:  709:           state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  710:           state->handCount[currentPlayer]--;
    #####:  711:      	    card_not_discarded = 0;//Exit the loop
        -:  712:      	  }
    #####:  713:         else if (p > state->handCount[currentPlayer]){
        -:  714:           if(DEBUG) {
        -:  715:             printf("No estate cards in your hand, invalid choice\n");
        -:  716:             printf("Must gain an estate if there are any\n");
        -:  717:           }
    #####:  718:           if (supplyCount(estate, state) > 0){
    #####:  719:             gainCard(estate, state, 0, currentPlayer);
    #####:  720:  	          state->supplyCount[estate]--;//Decrement estates
    #####:  721:  	          if (supplyCount(estate, state) == 0){
    #####:  722:                isGameOver(state);
        -:  723:              }
        -:  724:            }
    #####:  725:	          card_not_discarded = 0;//Exit the loop
        -:  726:	        }
        -:  727:         
        -:  728:         else{
    #####:  729:    	      p++;//Next card
        -:  730:    	    }
        -:  731:    	  }
        -:  732:      }
        -:  733:      else{
    #####:  734:       if (supplyCount(estate, state) > 0){
    #####:  735:	        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  736:	        state->supplyCount[estate]--;//Decrement Estates
    #####:  737:	        if (supplyCount(estate, state) == 0){
    #####:  738:           isGameOver(state);
        -:  739:         }
        -:  740:       }
        -:  741:     }
        -:  742:     
        -:  743:     
    #####:  744:     return 0;
        -:  745:     
        -:  746:     case great_hall:
        -:  747:      //+1 Card
        1:  748:     drawCard(currentPlayer, state);
        -:  749:     
        -:  750:      //+1 Actions
        1:  751:     state->numActions++;
        -:  752:     
        -:  753:      //discard card from hand
        1:  754:     discardCard(handPos, currentPlayer, state, 0);
        1:  755:     return 0;
        -:  756:     
        -:  757:     case minion:
        -:  758:      //+1 action
    #####:  759:     state->numActions++;
        -:  760:     
        -:  761:      //discard card from hand
    #####:  762:     discardCard(handPos, currentPlayer, state, 0);
        -:  763:     
    #####:  764:      if (choice1)		//+2 coins
        -:  765:      {
    #####:  766:       state->coins = state->coins + 2;
        -:  767:     }
        -:  768:     
    #####:  769:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  770:      {
        -:  771:	  //discard hand
    #####:  772:       while(numHandCards(state) > 0)
        -:  773:       {
    #####:  774:         discardCard(handPos, currentPlayer, state, 0);
        -:  775:       }
        -:  776:       
        -:  777:	  //draw 4
    #####:  778:       for (i = 0; i < 4; i++)
        -:  779:       {
    #####:  780:         drawCard(currentPlayer, state);
        -:  781:       }
        -:  782:       
        -:  783:	  //other players discard hand and redraw if hand size > 4
    #####:  784:       for (i = 0; i < state->numPlayers; i++)
        -:  785:       {
    #####:  786:         if (i != currentPlayer)
        -:  787:         {
    #####:  788:          if ( state->handCount[i] > 4 )
        -:  789:          {
        -:  790:		      //discard hand
    #####:  791:            while( state->handCount[i] > 0 )
        -:  792:            {
    #####:  793:             discardCard(handPos, i, state, 0);
        -:  794:           }
        -:  795:           
        -:  796:		      //draw 4
    #####:  797:           for (j = 0; j < 4; j++)
        -:  798:           {
    #####:  799:             drawCard(i, state);
        -:  800:           }
        -:  801:         }
        -:  802:       }
        -:  803:     }
        -:  804:     
        -:  805:   }
    #####:  806:   return 0;
        -:  807:   
        -:  808:   case steward:
        1:  809:   if (choice1 == 1)
        -:  810:   {
        -:  811:	  //+2 cards
    #####:  812:     drawCard(currentPlayer, state);
    #####:  813:     drawCard(currentPlayer, state);
        -:  814:   }
        1:  815:   else if (choice1 == 2)
        -:  816:   {
        -:  817:	  //+2 coins
        1:  818:     state->coins = state->coins + 2;
        -:  819:   }
        -:  820:   else
        -:  821:   {
        -:  822:	  //trash 2 cards in hand
    #####:  823:     discardCard(choice2, currentPlayer, state, 1);
    #####:  824:     discardCard(choice3, currentPlayer, state, 1);
        -:  825:   }
        -:  826:   
        -:  827:      //discard card from hand
        1:  828:   discardCard(handPos, currentPlayer, state, 0);
        1:  829:   return 0;
        -:  830:   
        -:  831:   case tribute:
    #####:  832:   if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  833:     if (state->deckCount[nextPlayer] > 0){
    #####:  834:       tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  835:       state->deckCount[nextPlayer]--;
        -:  836:     }
    #####:  837:     else if (state->discardCount[nextPlayer] > 0){
    #####:  838:       tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  839:       state->discardCount[nextPlayer]--;
        -:  840:     }
        -:  841:     else{
        -:  842:	  //No Card to Reveal
        -:  843:       if (DEBUG){
        -:  844:         printf("No cards to reveal\n");
        -:  845:       }
        -:  846:     }
        -:  847:   }
        -:  848:   
        -:  849:   else{
    #####:  850:     if (state->deckCount[nextPlayer] == 0){
    #####:  851:       for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  852:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  853:	    state->deckCount[nextPlayer]++;
    #####:  854:	    state->discard[nextPlayer][i] = -1;
    #####:  855:	    state->discardCount[nextPlayer]--;
        -:  856:	  }
        -:  857:   
    #####:  858:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  859:	} 
    #####:  860:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  861:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  862:	state->deckCount[nextPlayer]--;
    #####:  863:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  864:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  865:	state->deckCount[nextPlayer]--;
        -:  866:}    
        -:  867:
    #####:  868:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  869:       state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  870:       state->playedCardCount++;
    #####:  871:       tributeRevealedCards[1] = -1;
        -:  872:     }
        -:  873:
    #####:  874:     for (i = 0; i <= 2; i ++){
    #####:  875:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  876:   state->coins += 2;
        -:  877: }
        -:  878: 
    #####:  879:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  880:   drawCard(currentPlayer, state);
    #####:  881:   drawCard(currentPlayer, state);
        -:  882: }
        -:  883:	else{//Action Card
    #####:  884:   state->numActions = state->numActions + 2;
        -:  885: }
        -:  886:}
        -:  887:
    #####:  888:return 0;
        -:  889:
        -:  890:case ambassador:
    #####:  891:      j = 0;		//used to check if player has enough cards to discard
        -:  892:
    #####:  893:      if (choice2 > 2 || choice2 < 0)
        -:  894:      {
    #####:  895:       return -1;				
        -:  896:     }
        -:  897:
    #####:  898:     if (choice1 == handPos)
        -:  899:     {
    #####:  900:       return -1;
        -:  901:     }
        -:  902:
    #####:  903:     for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  904:     {
    #####:  905:       if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  906:       {
    #####:  907:         j++;
        -:  908:       }
        -:  909:     }
    #####:  910:     if (j < choice2)
        -:  911:     {
    #####:  912:       return -1;				
        -:  913:     }
        -:  914:
        -:  915:     if (DEBUG) 
        -:  916:       printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  917:
        -:  918:      //increase supply count for choosen card by amount being discarded
    #####:  919:     state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  920:     
        -:  921:      //each other player gains a copy of revealed card
    #####:  922:     for (i = 0; i < state->numPlayers; i++)
        -:  923:     {
    #####:  924:       if (i != currentPlayer)
        -:  925:       {
    #####:  926:         gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  927:       }
        -:  928:     }
        -:  929:
        -:  930:      //discard played card from hand
    #####:  931:     discardCard(handPos, currentPlayer, state, 0);			
        -:  932:
        -:  933:      //trash copies of cards returned to supply
    #####:  934:     for (j = 0; j < choice2; j++)
        -:  935:     {
    #####:  936:       for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  937:       {
    #####:  938:         if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  939:         {
    #####:  940:          discardCard(i, currentPlayer, state, 1);
    #####:  941:          break;
        -:  942:        }
        -:  943:      }
        -:  944:    }			
        -:  945:
    #####:  946:    return 0;
        -:  947:    
        -:  948:    case cutpurse:
        -:  949:
    #####:  950:    updateCoins(currentPlayer, state, 2);
    #####:  951:    for (i = 0; i < state->numPlayers; i++)
        -:  952:    {
    #####:  953:     if (i != currentPlayer)
        -:  954:     {
    #####:  955:       for (j = 0; j < state->handCount[i]; j++)
        -:  956:       {
    #####:  957:        if (state->hand[i][j] == copper)
        -:  958:        {
    #####:  959:          discardCard(j, i, state, 0);
    #####:  960:          break;
        -:  961:        }
    #####:  962:        if (j == state->handCount[i])
        -:  963:        {
    #####:  964:          for (k = 0; k < state->handCount[i]; k++)
        -:  965:          {
        -:  966:           if (DEBUG)
        -:  967:             printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  968:         }	
    #####:  969:         break;
        -:  970:       }		
        -:  971:     }
        -:  972:     
        -:  973:   }
        -:  974:   
        -:  975: }				
        -:  976:
        -:  977:      //discard played card from hand
    #####:  978: discardCard(handPos, currentPlayer, state, 0);			
        -:  979:
    #####:  980: return 0;
        -:  981:
        -:  982: 
        -:  983: case embargo: 
        -:  984:      //+2 Coins
    #####:  985: state->coins = state->coins + 2;
        -:  986: 
        -:  987:      //see if selected pile is in play
    #####:  988: if ( state->supplyCount[choice1] == -1 )
        -:  989: {
    #####:  990:   return -1;
        -:  991: }
        -:  992: 
        -:  993:      //add embargo token to selected supply pile
    #####:  994: state->embargoTokens[choice1]++;
        -:  995: 
        -:  996:      //trash card
    #####:  997: discardCard(handPos, currentPlayer, state, 1);		
    #####:  998: return 0;
        -:  999: 
        -: 1000: case outpost:
        -: 1001:      //set outpost flag
    #####: 1002: state->outpostPlayed++;
        -: 1003: 
        -: 1004:      //discard card
    #####: 1005: discardCard(handPos, currentPlayer, state, 0);
    #####: 1006: return 0;
        -: 1007: 
        -: 1008: case salvager:
        -: 1009:      //+1 buy
    #####: 1010: state->numBuys++;
        -: 1011: 
    #####: 1012: if (choice1)
        -: 1013: {
        -: 1014:	  //gain coins equal to trashed card
    #####: 1015:   state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1016:	  //trash card
    #####: 1017:   discardCard(choice1, currentPlayer, state, 1);	
        -: 1018: }
        -: 1019: 
        -: 1020:      //discard card
    #####: 1021: discardCard(handPos, currentPlayer, state, 0);
    #####: 1022: return 0;
        -: 1023: 
        -: 1024: case sea_hag:
    #####: 1025: for (i = 0; i < state->numPlayers; i++){
    #####: 1026:   if (i != currentPlayer){
    #####: 1027:     state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1028:     state->discardCount[i]++;
    #####: 1029:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1030:	}
        -: 1031:}
    #####: 1032:return 0;
        -: 1033:
        -: 1034:case treasure_map:
        -: 1035:      //search hand for another treasure_map
    #####: 1036:index = -1;
    #####: 1037:for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1038:{
    #####: 1039: if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1040: {
    #####: 1041:   index = i;
    #####: 1042:   break;
        -: 1043: }
        -: 1044:}
    #####: 1045:if (index > -1)
        -: 1046:{
        -: 1047:	  //trash both treasure cards
    #####: 1048: discardCard(handPos, currentPlayer, state, 1);
    #####: 1049: discardCard(index, currentPlayer, state, 1);
        -: 1050:
        -: 1051:	  //gain 4 Gold cards
    #####: 1052: for (i = 0; i < 4; i++)
        -: 1053: {
    #####: 1054:   gainCard(gold, state, 1, currentPlayer);
        -: 1055: }
        -: 1056: 
        -: 1057:	  //return success
    #####: 1058: return 1;
        -: 1059:}
        -: 1060:
        -: 1061:      //no second treasure_map found in hand
    #####: 1062:return -1;
        -: 1063:}
        -: 1064:
    #####: 1065:return -1;
        -: 1066:}
        -: 1067:
        5: 1068:int adventurerCardEffect(struct gameState *state, int handPos, int currentPlayer){
        -: 1069:  int temphand[MAX_HAND];// moved above the if statement
        5: 1070:  int drawntreasure=0;
        -: 1071:  int cardDrawn;
        5: 1072:  int z = 1;// this is the counter for the temp hand
        -: 1073:
       33: 1074:  while(drawntreasure<2){
       23: 1075:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        2: 1076:      shuffle(currentPlayer, state);
        -: 1077:    }
       23: 1078:    drawCard(currentPlayer, state);
       23: 1079:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       23: 1080:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       10: 1081:      drawntreasure++;
        -: 1082:    else{
       13: 1083:      temphand[z]=cardDrawn;
       13: 1084:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       13: 1085:      z++;
        -: 1086:    }
        -: 1087:  }
       28: 1088:  while(z-1>=0){
       18: 1089:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       18: 1090:    z=z-1;
        -: 1091:  }
        5: 1092:  return 0;
        -: 1093:}
        -: 1094:
        4: 1095:int council_roomCardEffect(struct gameState *state, int handPos, int currentPlayer){
        -: 1096:  int i;
        -: 1097:  //+4 Cards
       20: 1098:  for (i = 0; i < 4; i++)
        -: 1099:  {
       16: 1100:    drawCard(currentPlayer, state);
        -: 1101:  }
        -: 1102:  
        -: 1103:  //+1 Buy
        4: 1104:  state->numBuys++;
        -: 1105:  
        -: 1106:  //Each other player draws a card
       15: 1107:  for (i = 0; i < state->numPlayers; i++)
        -: 1108:  {
       11: 1109:    if ( i != currentPlayer )
        -: 1110:    {
        7: 1111:      drawCard(i, state);
        -: 1112:    }
        -: 1113:  }
        -: 1114:  
        -: 1115:  //put played card in played card pile
        4: 1116:  discardCard(handPos, currentPlayer, state, 0);
        -: 1117:  
        4: 1118:  return 0;
        -: 1119:}
        -: 1120:
    #####: 1121:int feastCardEffect(struct gameState *state, int handPos, int currentPlayer, int choice1){
        -: 1122:  int i;
        -: 1123:  int x;
        -: 1124:  int temphand[MAX_HAND];// moved above the if statement
        -: 1125:
        -: 1126:  //gain card with cost up to 5
        -: 1127:  //Backup hand
    #####: 1128:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1129:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1130:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1131:  }
        -: 1132:  //Backup hand
        -: 1133:
        -: 1134:  //Update Coins for Buy
    #####: 1135:  updateCoins(currentPlayer, state, 5);
    #####: 1136:  x = 1;//Condition to loop on
    #####: 1137:  while( x == 1) {//Buy one card
    #####: 1138:    if (supplyCount(choice1, state) <= 0){
        -: 1139:      if (DEBUG)
        -: 1140:        printf("None of that card left, sorry!\n");
        -: 1141:
        -: 1142:      if (DEBUG){
        -: 1143:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1144:      }
        -: 1145:    }
    #####: 1146:    else if (state->coins < getCost(choice1)){
    #####: 1147:      printf("That card is too expensive!\n");
        -: 1148:
        -: 1149:      if (DEBUG){
        -: 1150:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1151:      }
        -: 1152:    }
        -: 1153:    else{
        -: 1154:
        -: 1155:      if (DEBUG){
        -: 1156:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1157:      }
        -: 1158:
    #####: 1159:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1160:      x = 0;//No more buying cards
        -: 1161:
        -: 1162:      if (DEBUG){
        -: 1163:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1164:      }
        -: 1165:    }
        -: 1166:  }     
        -: 1167:
        -: 1168:  //Reset Hand
    #####: 1169:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1170:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1171:    temphand[i] = -1;
        -: 1172:  }  
    #####: 1173:  return 0;
        -: 1174:}
        -: 1175:
    #####: 1176:int mineCardEffect(struct gameState *state, int handPos, int currentPlayer, int choice2, int choice1){
        -: 1177:  int i;
        -: 1178:  int j;
        -: 1179:
    #####: 1180:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1181:
    #####: 1182:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1183:  {
    #####: 1184:    return -1;
        -: 1185:  }
        -: 1186:  
    #####: 1187:  if (choice2 > treasure_map || choice2 < curse)
        -: 1188:  {
    #####: 1189:    return -1;
        -: 1190:  }
        -: 1191:
    #####: 1192:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1193:  {
    #####: 1194:    return -1;
        -: 1195:  }
        -: 1196:
    #####: 1197:  gainCard(choice2, state, 2, currentPlayer);
        -: 1198:
        -: 1199:  //discard card from hand
    #####: 1200:  discardCard(handPos, currentPlayer, state, 0);
        -: 1201:
        -: 1202:  //discard trashed card
    #####: 1203:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1204:  {
    #####: 1205:    if (state->hand[currentPlayer][i] == j)
        -: 1206:    {
    #####: 1207:      discardCard(i, currentPlayer, state, 0);      
    #####: 1208:      break;
        -: 1209:    }
        -: 1210:  }
        -: 1211:  
    #####: 1212:  return 0;
        -: 1213:}
        -: 1214:
    #####: 1215:int remodelCardEffect(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2){
        -: 1216:  int i;
        -: 1217:  int j;
        -: 1218:
    #####: 1219:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1220:
    #####: 1221:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1222:  {
    #####: 1223:    return -1;
        -: 1224:  }
        -: 1225:
    #####: 1226:  gainCard(choice2, state, 0, currentPlayer);
        -: 1227:
        -: 1228:  //discard card from hand
    #####: 1229:  discardCard(handPos, currentPlayer, state, 0);
        -: 1230:
        -: 1231:  //discard trashed card
    #####: 1232:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1233:  {
    #####: 1234:    if (state->hand[currentPlayer][i] == j)
        -: 1235:    {
    #####: 1236:      discardCard(i, currentPlayer, state, 0);      
    #####: 1237:      break;
        -: 1238:    }
        -: 1239:  }
        -: 1240:
        -: 1241:
    #####: 1242:  return 0;
        -: 1243:}
        -: 1244:
    #####: 1245:int smithyCardEffect(struct gameState *state, int handPos, int currentPlayer){
        -: 1246:  int i;
        -: 1247:  //+3 Cards
    #####: 1248:  for (i = 0; i < 3; i++)
        -: 1249:  {
    #####: 1250:    drawCard(currentPlayer, state);
        -: 1251:  }
        -: 1252:  
        -: 1253:  //discard card from hand
    #####: 1254:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1255:  return 0;
        -: 1256:}
        -: 1257:
        -: 1258:
        8: 1259:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1260:{
        -: 1261:	
        -: 1262:  //if card is not trashed, added to Played pile 
        8: 1263:  if (trashFlag < 1)
        -: 1264:  {
        -: 1265:      //add card to played pile
        8: 1266:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1267:    state->playedCardCount++;
        -: 1268:  }
        -: 1269:  
        -: 1270:  //set played card to -1
        8: 1271:  state->hand[currentPlayer][handPos] = -1;
        -: 1272:  
        -: 1273:  //remove card from player's hand
        8: 1274:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1275:  {
        -: 1276:      //reduce number of cards in hand
        1: 1277:    state->handCount[currentPlayer]--;
        -: 1278:  }
        7: 1279:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1280:  {
        -: 1281:      //reduce number of cards in hand
    #####: 1282:    state->handCount[currentPlayer]--;
        -: 1283:  }
        -: 1284:  else 	
        -: 1285:  {
        -: 1286:      //replace discarded card with last card in hand
        7: 1287:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1288:      //set last card to -1
        7: 1289:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1290:      //reduce number of cards in hand
        7: 1291:    state->handCount[currentPlayer]--;
        -: 1292:  }
        -: 1293:  
        8: 1294:  return 0;
        -: 1295:}
        -: 1296:
    #####: 1297:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1298:{
        -: 1299:  //Note: supplyPos is enum of choosen card
        -: 1300:	
        -: 1301:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1302:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1303:  {
    #####: 1304:    return -1;
        -: 1305:  }
        -: 1306:  
        -: 1307:  //added card for [whoseTurn] current player:
        -: 1308:  // toFlag = 0 : add to discard
        -: 1309:  // toFlag = 1 : add to deck
        -: 1310:  // toFlag = 2 : add to hand
        -: 1311:
    #####: 1312:  if (toFlag == 1)
        -: 1313:  {
    #####: 1314:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1315:    state->deckCount[player]++;
        -: 1316:  }
    #####: 1317:  else if (toFlag == 2)
        -: 1318:  {
    #####: 1319:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1320:    state->handCount[player]++;
        -: 1321:  }
        -: 1322:  else
        -: 1323:  {
    #####: 1324:    state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1325:    state->discardCount[player]++;
        -: 1326:  }
        -: 1327:  
        -: 1328:  //decrease number in supply pile
    #####: 1329:  state->supplyCount[supplyPos]--;
        -: 1330:  
    #####: 1331:  return 0;
        -: 1332:}
        -: 1333:
       20: 1334:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1335:{
        -: 1336:  int i;
        -: 1337:  
        -: 1338:  //reset coin count
       20: 1339:  state->coins = 0;
        -: 1340:
        -: 1341:  //add coins for each Treasure card in player's hand
      122: 1342:  for (i = 0; i < state->handCount[player]; i++)
        -: 1343:  {
      102: 1344:    if (state->hand[player][i] == copper)
        -: 1345:    {
       85: 1346:     state->coins += 1;
        -: 1347:   }
       17: 1348:   else if (state->hand[player][i] == silver)
        -: 1349:   {
    #####: 1350:     state->coins += 2;
        -: 1351:   }
       17: 1352:   else if (state->hand[player][i] == gold)
        -: 1353:   {
    #####: 1354:     state->coins += 3;
        -: 1355:   }	
        -: 1356: }	
        -: 1357:
        -: 1358:  //add bonus
       20: 1359: state->coins += bonus;
        -: 1360:
       20: 1361: return 0;
        -: 1362:}
        -: 1363:
        -: 1364:
        -: 1365://end of dominion.c
        -: 1366:
